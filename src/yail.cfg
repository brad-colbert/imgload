# Sample linker configuration for C programs using the Atari binary file support.
# Use with: cl65 -tatari -Catari-xex.cfg prog.c -o prog.xex
FEATURES {
    STARTADDRESS: default = $2F00;
}
SYMBOLS {
    __SYSTEM_CHECK__:    type = import;  # force inclusion of "system check" load chunk
    __STACKSIZE__:       type = weak, value = $0400; # 1k stack
    __STARTADDRESS__:    type = export, value = %S;
    __RESERVED_MEMORY__: type = weak, value = $0000;
    __SYSCHKHDR__:       type = export, value = 0; # Disable system check header
    __SYSCHKTRL__:       type = export, value = 0; # Disable system check trailer
}
MEMORY {
    DLISTMEM_R:  file = %O, define = yes, start = $0600, size = $0100; # 256 bytes
    #DLISTMEM_R:  file = %O, define = yes, start = $7C00, size = $0100; # 256 bytes
    SCREENMEM_R:file = %O, define = yes, start = $8000, size = $22B0; # 40 * 220 + 80;
#    DLISTMEM_R:  file = %O, define = yes, start = $4C00, size = $0100; # 256 bytes
#    DLISTMEM_G:  file = %O, define = yes, start = $4D00, size = $0100; # 256 bytes
#    DLISTMEM_B:  file = %O, define = yes, start = $4E00, size = $0100; # 256 bytes
#    SCREENMEM_R:file = %O, define = yes, start = $5000, size = $22B0; # 40 * 220 + 80;
#    SCREENMEM_G:file = %O, define = yes, start = $72B0, size = $22B0; # 40 * 220 + 80;
#    SCREENMEM_B:file = %O, define = yes, start = $9560, size = $22B0; # 40 * 220 + 80;
    ZP:         file = "", define = yes, start = $0082, size = $007E;
# "system check" load chunk
    SYSCHKCHNK: file = %O,               start = $2E00, size = $0300;
# "main program" load chunk
    MAIN:       file = %O, define = yes, start = %S,    size = $BC20 - __STACKSIZE__ - __RESERVED_MEMORY__ - %S;
}
FILES {
    %O: format = atari;
}
FORMATS {
    atari: runad = start,
           initad = SYSCHKCHNK: __SYSTEM_CHECK__;
}
SEGMENTS {
    DLIST_R:   load = DLISTMEM_R,  type = ro, define = yes;
    SCREEN_R:  load = SCREENMEM_R, type = ro, define = yes;
#    DLIST_R:   load = DLISTMEM_R,  type = ro, define = yes;
#    DLIST_G:   load = DLISTMEM_G,  type = ro, define = yes;
#    DLIST_B:   load = DLISTMEM_B,  type = ro, define = yes;
#    SCREEN_R:  load = SCREENMEM_R,type = ro, define = yes;
#    SCREEN_G:  load = SCREENMEM_G,type = ro, define = yes;
#    SCREEN_B:  load = SCREENMEM_B,type = ro, define = yes;
    ZEROPAGE:  load = ZP,         type = zp;
    EXTZP:     load = ZP,         type = zp,                optional = yes;
    SYSCHK:    load = SYSCHKCHNK, type = rw,  define = yes, optional = yes;
    STARTUP:   load = MAIN,       type = ro,  define = yes;
    LOWBSS:    load = MAIN,       type = rw,                optional = yes;  # not zero initialized
    LOWCODE:   load = MAIN,       type = ro,  define = yes, optional = yes;
    ONCE:      load = MAIN,       type = ro,                optional = yes;
    CODE:      load = MAIN,       type = ro,  define = yes;
    RODATA:    load = MAIN,       type = ro;
    DATA:      load = MAIN,       type = rw;
    INIT:      load = MAIN,       type = rw,                optional = yes;
    BSS:       load = MAIN,       type = bss, define = yes;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
